const triggerMainLink = (e, el, mainLink) => {
  const clickTarget = e.target;
  if ((el.classList.contains("clickable-card--whole-card") || clickTarget.classList.contains("js-clickable-card-target") || clickTarget.closest(".js-clickable-card-target")) && clickTarget !== mainLink && clickTarget.tagName !== "A") {
    mainLink.click();
  }
};
const initClickableCard = (el) => {
  const isExperienceEditor = Boolean(
    document.body.classList.contains("is-page-editor")
  );
  if (isExperienceEditor)
    return;
  function bindEvents(mainLink2, targets) {
    el.addEventListener("click", (e) => {
      triggerMainLink(e, el, mainLink2);
    });
    el.addEventListener("keyup", (e) => {
      if (e.key === "Enter")
        triggerMainLink(e, el, mainLink2);
    });
    if (targets.length === 0) {
      el.addEventListener("mouseenter", (e) => {
        el.classList.add("clickable-card--hovered");
      });
      el.addEventListener("mouseleave", (e) => {
        el.classList.remove("clickable-card--hovered");
      });
    } else {
      targets.forEach((target) => {
        target.addEventListener("mouseenter", (e) => {
          el.classList.add("clickable-card--hovered");
        });
        target.addEventListener("mouseleave", (e) => {
          el.classList.remove("clickable-card--hovered");
        });
      });
    }
  }
  const mainLink = el.querySelector(".js-clickable-card__link") || el.getElementsByTagName("a")[0];
  if (!mainLink || mainLink.length > 1)
    return;
  const clickableCardTargets = el.querySelectorAll(".js-clickable-card-target");
  if (clickableCardTargets.length === 0) {
    el.classList.add("clickable-card--whole-card");
  } else {
    clickableCardTargets.forEach(
      (target) => target.classList.add("clickable-card__target")
    );
  }
  el.classList.add("clickable-card--initialized");
  bindEvents(mainLink, clickableCardTargets);
};
export {
  initClickableCard as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2thYmxlQ2FyZC5pbml0LTM5YjNmZTRkLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9mcm9udGVuZC9qcy9jb21tb24vY2xpY2thYmxlQ2FyZC5pbml0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiB0cmlnZ2VyTWFpbkxpbmsgLSB0cmlnZ2VyIGEgbGluayBjbGljayBpZiBhIGNsaWNrIGlzIHJlZ2lzdGVyZWQgb24gY2VydGFpblxyXG4gKiBjbGlja2FibGUgRE9NIG9iamVjdHMgd2l0aGluIHRoZSBzcGVjaWZpZWQgY29udGFpbmVyIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RXZlbnR9IGUgLSBDbGljayBldmVudCBmcm9tIG9uQ2xpY2tcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSBUaGUgY29udGFpbmVyIGVsZW1lbnQgdG8gY2hlY2sgZm9yIGNsaWNrc1xyXG4gKiBAcGFyYW0ge2FueX0gbWFpbkxpbmsgLSBUaGUgbGluayB0byB0cmlnZ2VyXHJcbiAqXHJcbiAqIEByZXR1cm4ge3ZvaWR9IE5vdGhpbmdcclxuICovXHJcbmNvbnN0IHRyaWdnZXJNYWluTGluayA9IChlLCBlbCwgbWFpbkxpbmspID0+IHtcclxuICAvLyBHZXQgdGhlIGVsZW1lbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIGNsaWNrXHJcbiAgY29uc3QgY2xpY2tUYXJnZXQgPSBlLnRhcmdldDtcclxuXHJcbiAgaWYgKFxyXG4gICAgKGVsLmNsYXNzTGlzdC5jb250YWlucyhcImNsaWNrYWJsZS1jYXJkLS13aG9sZS1jYXJkXCIpIHx8XHJcbiAgICAgIGNsaWNrVGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImpzLWNsaWNrYWJsZS1jYXJkLXRhcmdldFwiKSB8fFxyXG4gICAgICBjbGlja1RhcmdldC5jbG9zZXN0KFwiLmpzLWNsaWNrYWJsZS1jYXJkLXRhcmdldFwiKSkgJiZcclxuICAgIGNsaWNrVGFyZ2V0ICE9PSBtYWluTGluayAmJlxyXG4gICAgY2xpY2tUYXJnZXQudGFnTmFtZSAhPT0gXCJBXCJcclxuICApIHtcclxuICAgIG1haW5MaW5rLmNsaWNrKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGluaXRDbGlja2FibGVDYXJkIC0gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF2b2lkIHJlcGVhdGVkIGxpbmtzIHRvIHRoZSBzYW1lXHJcbiAqIGRlc3RpbmF0aW9uIHdpdGhpbiBhIGNhcmQgY29tcG9uZW50IChmb3IgZXhhbXBsZSwgaWYgYSBwcm9tbyBpdGVtIG5lZWRzIGl0c1xyXG4gKiBpbWFnZSwgdGl0bGUsIGFuZCBDVEEgdG8gYWxsIGxpbmsgdG8gdGhlIHNhbWUgVVJMKS5cclxuICpcclxuICogVG8gdXNlIHRoaXMgc2NyaXB0OlxyXG4gKiAxLiBBZGQgYSBDU1MgY2xhc3Mgb2YgLmpzLWNsaWNrYWJsZS1jYXJkIHRvIHRoZSBjYXJkIGVsZW1lbnQuXHJcbiAqIDIuIEluY2x1ZGUgb25lIG1haW4gbGluayBpbnNpZGUgdGhlIGNhcmQgZWxlbWVudC4gIElmIG1vcmUgdGhhbiBvbmUgbGluayBpc1xyXG4gKiBwcmVzZW50LCBhZGQgYSBDU1MgY2xhc3Mgb2YgLmpzLWNsaWNrYWJsZS1jYXJkX19saW5rIHRvIHRoZSBtYWluIGxpbmsgdGhhdFxyXG4gKiBzaG91bGQgYXBwbHkgdG8gbXVsdGlwbGUgY2xpY2thYmxlIGl0ZW1zLlxyXG4gKiAzLiBJZiB0aGUgZW50aXJlIGNhcmQgc2hvdWxkIGJlIGNsaWNrYWJsZSwgdGhhdCdzIGFsbCB5b3UgbmVlZCB0byBkbyFcclxuICogSWYgeW91IHdhbnQgdG8gbWFudWFsbHkgc3BlY2lmeSB3aGF0IHNob3VsZCBiZSBjbGlja2FibGUsIGFkZCBhIENTUyBjbGFzc1xyXG4gKiBvZiAuanMtY2xpY2thYmxlLWNhcmQtdGFyZ2V0IHRvIGFueSBlbGVtZW50IHRoYXQgc2hvdWxkIHRyaWdnZXIgYSBjbGlja1xyXG4gKiBvbiB0aGUgbWFpbiBsaW5rLlxyXG4gKiA0LiBUaGUgc2NyaXB0IHdpbGwgYWRkIGEgQ1NTIGNsYXNzIG9mIC5jbGlja2FibGUtY2FyZC0taW5pdGlhbGl6ZWQsXHJcbiAqIHdoaWNoIGF1dG9tYXRpY2FsbHkgYWRkcyBhIHBvaW50ZXIgY3Vyc29yIHRvIGluZGljYXRlIFwiY2xpY2thYmlsaXR5XCIuXHJcbiAqIElmIHRoZSBlbnRpcmUgY2FyZCBpcyBjbGlja2FibGUsIGl0IHdpbGwgYWRkIGEgQ1NTIGNsYXNzIG9mXHJcbiAqIC5jbGlja2FibGUtY2FyZC0td2hvbGUtY2FyZC4gIEJvdGggb2YgdGhlc2UgY2xhc3NlcyBjYW4gYmUgdXNlZCB0b1xyXG4gKiBjcmVhdGUgbW9yZSBjdXN0b20gaG92ZXIgZWZmZWN0cyB2aWEgQ1NTLlxyXG4gKlxyXG4gKlxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIFRoZSBjYXJkIGVsZW1lbnQgdGhlIGV2ZW50IGlzIGF0dGFjaGVkIHRvXHJcbiAqXHJcbiAqIEByZXR1cm4ge3ZvaWR9IE5vdGhpbmdcclxuICovXHJcbmNvbnN0IGluaXRDbGlja2FibGVDYXJkID0gKGVsKSA9PiB7XHJcbiAgY29uc3QgaXNFeHBlcmllbmNlRWRpdG9yID0gQm9vbGVhbihcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXMtcGFnZS1lZGl0b3JcIiksXHJcbiAgKTtcclxuICBpZiAoaXNFeHBlcmllbmNlRWRpdG9yKSByZXR1cm47XHJcblxyXG4gIGZ1bmN0aW9uIGJpbmRFdmVudHMobWFpbkxpbmssIHRhcmdldHMpIHtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICB0cmlnZ2VyTWFpbkxpbmsoZSwgZWwsIG1haW5MaW5rKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCAoZSkgPT4ge1xyXG4gICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikgdHJpZ2dlck1haW5MaW5rKGUsIGVsLCBtYWluTGluayk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGFyZ2V0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKGUpID0+IHtcclxuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKFwiY2xpY2thYmxlLWNhcmQtLWhvdmVyZWRcIik7XHJcbiAgICAgIH0pO1xyXG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoZSkgPT4ge1xyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJjbGlja2FibGUtY2FyZC0taG92ZXJlZFwiKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4ge1xyXG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChcImNsaWNrYWJsZS1jYXJkLS1ob3ZlcmVkXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShcImNsaWNrYWJsZS1jYXJkLS1ob3ZlcmVkXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEdldCB0aGUgbWFpbiBsaW5rIGVsZW1lbnRcclxuICAvLyBXZSdsbCBsb29rIGZvciBhIGNsYXNzIG9mIFwianMtY2xpY2thYmxlLWNhcmRfX2xpbmtcIlxyXG4gIC8vIElmIHdlIGRvbnQnIGZpbmQgaXQsIHdlJ2xsIGZhbGwgYmFjayB0byB0aGUgZmlyc3QgbGluayBmb3VuZFxyXG4gIGNvbnN0IG1haW5MaW5rID1cclxuICAgIGVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtY2xpY2thYmxlLWNhcmRfX2xpbmtcIikgfHxcclxuICAgIGVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYVwiKVswXTtcclxuXHJcbiAgLy8gRG9uJ3QgaW5pdGlhbGl6ZSBpZiB0aGVyZSdzIG5vIGxpbmsgdG8gY2xpY2shXHJcbiAgaWYgKCFtYWluTGluayB8fCBtYWluTGluay5sZW5ndGggPiAxKSByZXR1cm47XHJcblxyXG4gIC8vIEFkZCBhIGNsYXNzbmFtZSB0byBpbmRpY2F0ZSB0aGUgd2hvbGUgY2FyZCBpcyBjbGlja2FibGUsXHJcbiAgLy8gaWYgbm8gZWxlbWVudHMgd2l0aGluIGhhdmUgdGhlIC5qcy1jbGlja2FibGUtY2FyZC10YXJnZXQgY2xhc3NcclxuICBjb25zdCBjbGlja2FibGVDYXJkVGFyZ2V0cyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtY2xpY2thYmxlLWNhcmQtdGFyZ2V0XCIpO1xyXG4gIGlmIChjbGlja2FibGVDYXJkVGFyZ2V0cy5sZW5ndGggPT09IDApIHtcclxuICAgIGVsLmNsYXNzTGlzdC5hZGQoXCJjbGlja2FibGUtY2FyZC0td2hvbGUtY2FyZFwiKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY2xpY2thYmxlQ2FyZFRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PlxyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZChcImNsaWNrYWJsZS1jYXJkX190YXJnZXRcIiksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZWwuY2xhc3NMaXN0LmFkZChcImNsaWNrYWJsZS1jYXJkLS1pbml0aWFsaXplZFwiKTtcclxuICBiaW5kRXZlbnRzKG1haW5MaW5rLCBjbGlja2FibGVDYXJkVGFyZ2V0cyk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xpY2thYmxlQ2FyZDtcclxuIl0sIm5hbWVzIjpbIm1haW5MaW5rIl0sIm1hcHBpbmdzIjoiQUFVQSxNQUFNLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxhQUFhO0FBRTNDLFFBQU0sY0FBYyxFQUFFO0FBRXRCLE9BQ0csR0FBRyxVQUFVLFNBQVMsNEJBQTRCLEtBQ2pELFlBQVksVUFBVSxTQUFTLDBCQUEwQixLQUN6RCxZQUFZLFFBQVEsMkJBQTJCLE1BQ2pELGdCQUFnQixZQUNoQixZQUFZLFlBQVksS0FDeEI7QUFDQSxhQUFTLE1BQUs7QUFBQSxFQUNmO0FBQ0g7QUEyQkssTUFBQyxvQkFBb0IsQ0FBQyxPQUFPO0FBQ2hDLFFBQU0scUJBQXFCO0FBQUEsSUFDekIsU0FBUyxLQUFLLFVBQVUsU0FBUyxnQkFBZ0I7QUFBQSxFQUNyRDtBQUNFLE1BQUk7QUFBb0I7QUFFeEIsV0FBUyxXQUFXQSxXQUFVLFNBQVM7QUFDckMsT0FBRyxpQkFBaUIsU0FBUyxDQUFDLE1BQU07QUFDbEMsc0JBQWdCLEdBQUcsSUFBSUEsU0FBUTtBQUFBLElBQ3JDLENBQUs7QUFFRCxPQUFHLGlCQUFpQixTQUFTLENBQUMsTUFBTTtBQUNsQyxVQUFJLEVBQUUsUUFBUTtBQUFTLHdCQUFnQixHQUFHLElBQUlBLFNBQVE7QUFBQSxJQUM1RCxDQUFLO0FBRUQsUUFBSSxRQUFRLFdBQVcsR0FBRztBQUN4QixTQUFHLGlCQUFpQixjQUFjLENBQUMsTUFBTTtBQUN2QyxXQUFHLFVBQVUsSUFBSSx5QkFBeUI7QUFBQSxNQUNsRCxDQUFPO0FBQ0QsU0FBRyxpQkFBaUIsY0FBYyxDQUFDLE1BQU07QUFDdkMsV0FBRyxVQUFVLE9BQU8seUJBQXlCO0FBQUEsTUFDckQsQ0FBTztBQUFBLElBQ1AsT0FBVztBQUNMLGNBQVEsUUFBUSxDQUFDLFdBQVc7QUFDMUIsZUFBTyxpQkFBaUIsY0FBYyxDQUFDLE1BQU07QUFDM0MsYUFBRyxVQUFVLElBQUkseUJBQXlCO0FBQUEsUUFDcEQsQ0FBUztBQUNELGVBQU8saUJBQWlCLGNBQWMsQ0FBQyxNQUFNO0FBQzNDLGFBQUcsVUFBVSxPQUFPLHlCQUF5QjtBQUFBLFFBQ3ZELENBQVM7QUFBQSxNQUNULENBQU87QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUtELFFBQU0sV0FDSixHQUFHLGNBQWMsMEJBQTBCLEtBQzNDLEdBQUcscUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBR2hDLE1BQUksQ0FBQyxZQUFZLFNBQVMsU0FBUztBQUFHO0FBSXRDLFFBQU0sdUJBQXVCLEdBQUcsaUJBQWlCLDJCQUEyQjtBQUM1RSxNQUFJLHFCQUFxQixXQUFXLEdBQUc7QUFDckMsT0FBRyxVQUFVLElBQUksNEJBQTRCO0FBQUEsRUFDakQsT0FBUztBQUNMLHlCQUFxQjtBQUFBLE1BQVEsQ0FBQyxXQUM1QixPQUFPLFVBQVUsSUFBSSx3QkFBd0I7QUFBQSxJQUNuRDtBQUFBLEVBQ0c7QUFFRCxLQUFHLFVBQVUsSUFBSSw2QkFBNkI7QUFDOUMsYUFBVyxVQUFVLG9CQUFvQjtBQUMzQzsifQ==
