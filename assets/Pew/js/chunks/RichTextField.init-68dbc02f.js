import { u as uniqueId } from "../index-generated.js";
import "./vendor-531aba48.js";
function linkHasOnlyText(link) {
  if (link.tagName !== "A") {
    console.warn("The provided element is not a link.");
    return false;
  }
  return Array.from(link.childNodes).every(
    (node) => node.nodeType === Node.TEXT_NODE
  );
}
function addExternalLinkIcons(rootEl) {
  const legacyExternalLinkSelectors = [
    ".link-item__external--blue",
    ".link-item__external--white",
    ".link-item__external"
  ];
  const newExternalLinkSelector = ".link--external";
  const links = rootEl.querySelectorAll(
    [...legacyExternalLinkSelectors, newExternalLinkSelector].join(",")
  );
  for (let link of links) {
    if (!linkHasOnlyText(link))
      return;
    link.classList.add("link", "link--icon", "link--external");
    const svg = `
      <svg
        focusable="false"
        aria-hidden="true"
        class="pew-icon"
        xmlns="http://www.w3.org/2000/svg"
      >
        <use
          aria-hidden="true"
          xlink:href="${window.assetsFolder}/svg-sprite.svg#external-link">
        </use>
      </svg>
    `;
    link.innerHTML = `<span>${link.textContent}</span>${svg}`;
  }
}
function initSnippetAccordion(accordionRoot) {
  const toggleEls = accordionRoot.querySelectorAll(
    ".rich-text__accordion-toggle"
  );
  if (toggleEls.length < 1)
    return;
  toggleEls.forEach((toggle, index) => {
    const content = toggle.nextElementSibling;
    if (!content || !content.classList.contains("rich-text__accordion-content"))
      return;
    const toggleId = uniqueId("accordion-toggle");
    const contentId = uniqueId("accordion-content");
    toggle.setAttribute("role", "button");
    toggle.setAttribute("tabindex", "0");
    toggle.setAttribute("id", toggleId);
    toggle.setAttribute("type", "button");
    toggle.setAttribute("aria-expanded", false);
    toggle.setAttribute("aria-controls", contentId);
    content.setAttribute("id", contentId);
    content.setAttribute("aria-labelledby", toggleId);
    const plusMinusEl = document.createElement("div");
    plusMinusEl.classList.add("rich-text__plus-minus");
    toggle.appendChild(plusMinusEl);
    const innerWrapper = document.createElement("div");
    innerWrapper.classList.add("rich-text__content-inner");
    while (content.firstChild) {
      innerWrapper.appendChild(content.firstChild);
    }
    content.appendChild(innerWrapper);
    toggle.addEventListener("click", (event) => {
      const isOpen = toggle.getAttribute("aria-expanded") === "true";
      toggle.setAttribute("aria-expanded", !isOpen);
    });
    toggle.addEventListener("keydown", (event) => {
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        toggle.click();
      }
    });
  });
}
function initSnippetExpandMore(expandWrapper) {
  var _a, _b;
  const expandButton = expandWrapper == null ? void 0 : expandWrapper.querySelector(".rte-expand-button");
  if (!expandButton)
    return;
  let isExpanded = false;
  const contentToHide = [];
  let sibling = expandWrapper.nextElementSibling;
  while (sibling) {
    contentToHide.push(sibling);
    sibling = sibling.nextElementSibling;
  }
  const containerId = uniqueId("expandable-content");
  expandButton.setAttribute("aria-expanded", isExpanded);
  expandButton.setAttribute("aria-controls", containerId);
  const plusMinusEl = document.createElement("div");
  plusMinusEl.classList.add("rich-text__plus-minus");
  expandWrapper.appendChild(plusMinusEl);
  const container = document.createElement("section");
  container.setAttribute("id", containerId);
  container.setAttribute("aria-label", "Expanded content");
  container.setAttribute("tabindex", "-1");
  container.classList.add("expand-snippet__content-outer");
  const innerWrapper = document.createElement("div");
  innerWrapper.classList.add("rich-text-field");
  innerWrapper.classList.add("expand-snippet__content-inner");
  container.appendChild(innerWrapper);
  (_b = (_a = contentToHide[0]) == null ? void 0 : _a.parentNode) == null ? void 0 : _b.insertBefore(container, contentToHide[0]);
  contentToHide.forEach((el) => innerWrapper.appendChild(el));
  expandButton.addEventListener("click", () => {
    isExpanded = !isExpanded;
    expandButton.setAttribute("aria-expanded", isExpanded);
    if (isExpanded) {
      expandButton.value = "Collapse";
    } else {
      expandButton.value = "Expand";
    }
  });
  expandButton.addEventListener("keydown", (event) => {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      expandButton.click();
    }
  });
}
const initRichText = (el) => {
  addExternalLinkIcons(el);
  if (document.body.classList.contains("is-page-editor")) {
    return;
  }
  const accordions = el.querySelectorAll(".rich-text__accordion");
  if (accordions.length > 0) {
    accordions.forEach((accordion) => initSnippetAccordion(accordion));
  }
  const expandWrappers = el.querySelectorAll(".rich-text__expand-button");
  if (expandWrappers.length > 0) {
    expandWrappers.forEach((wrapper) => {
      initSnippetExpandMore(wrapper);
    });
  }
};
export {
  initRichText as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
