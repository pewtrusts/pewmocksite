import { g as getWordCount, r as registerXDBEvent } from "../index-generated.js";
import "./vendor-531aba48.js";
const initPageMetadata = (el) => {
  const dictionary = el.getAttribute("data-dictionary") ? JSON.parse(el.getAttribute("data-dictionary")) : {};
  const readTimeEl = el.querySelector(".js-read-time");
  const dataLayer = window.dataLayer || [];
  const dataEventIndex = dataLayer.findIndex(
    (obj) => Object.hasOwn(obj, "suggest_read_time_msec")
  );
  let readTimeMs;
  if (dataEventIndex !== -1) {
    readTimeMs = dataLayer[dataEventIndex].suggest_read_time_msec;
  }
  if (readTimeEl) {
    const textEls = document.querySelectorAll(".js-rich-text");
    const wordCount = getWordCount(textEls);
    const readTimeMin = wordCount / 270;
    readTimeEl.innerText = wordCount < 270 ? dictionary == null ? void 0 : dictionary.LESS_THAN_MINUTE : `${Math.floor(readTimeMin)} ${dictionary == null ? void 0 : dictionary.MIN}`;
    readTimeMs = Math.round(readTimeMin * 6e4);
    if (dataEventIndex !== -1) {
      dataLayer[dataEventIndex].suggest_read_time_msec = readTimeMs;
    }
  }
  if (readTimeMs) {
    setTimeout(() => {
      var _a;
      dataLayer.push({
        event: "pageRead"
      });
      const SCROLL_PERCENT = 0.75;
      const scrollTop = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const shouldRegisterPageRead = scrollTop + windowHeight >= SCROLL_PERCENT * documentHeight;
      const eventId = (_a = document.querySelector(".xdbpe-read-time")) == null ? void 0 : _a.dataset.xdbpe;
      if (eventId && shouldRegisterPageRead) {
        registerXDBEvent(eventId);
      }
    }, readTimeMs * 0.75);
  }
};
export {
  initPageMetadata as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZU1ldGFkYXRhLmluaXQtMjBiYWU5MWIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Zyb250ZW5kL2pzL2NvbXBvbmVudHMvUGFnZU1ldGFkYXRhL1BhZ2VNZXRhZGF0YS5pbml0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRXb3JkQ291bnQgZnJvbSBcIkBjb21tb24vZ2V0V29yZENvdW50XCI7XHJcbmltcG9ydCB7IHJlZ2lzdGVyWERCRXZlbnQgfSBmcm9tIFwiQGNvbW1vbi94REJcIjtcclxuXHJcbmNvbnN0IGluaXRQYWdlTWV0YWRhdGEgPSAoZWwpID0+IHtcclxuICBjb25zdCBkaWN0aW9uYXJ5ID0gZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1kaWN0aW9uYXJ5XCIpXHJcbiAgICA/IEpTT04ucGFyc2UoZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1kaWN0aW9uYXJ5XCIpKVxyXG4gICAgOiB7fTtcclxuXHJcbiAgY29uc3QgcmVhZFRpbWVFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoXCIuanMtcmVhZC10aW1lXCIpO1xyXG5cclxuICAvKipcclxuICAgKiBjc2h0bWwgaW5jbHVkZXMgYSBzY3JpcHQgdGhhdCBwdXNoZXMgYSBkYXRhTGF5ZXIgZXZlbnQgd2l0aFxyXG4gICAqIHN1Z2dlc3RfcmVhZF90aW1lX21zZWMgc2V0LiAoc3JjL0ZlYXR1cmUvQW5hbHl0aWNzL2NvZGUvTW9kZWxzL0d0bURhdGFMYXllck9iamVjdC5jcylcclxuICAgKiBJZiBubyByZWFkIHRpbWUgb3ZlcnJpZGUgd2FzIHNldCBieSBhdXRob3IsIHN1Z2dlc3RfcmVhZF90aW1lX21zZWMgd2lsbCBiZVxyXG4gICAqIGFuIGVtcHR5IHN0cmluZy4gSW4gdGhhdCBjYXNlLCB3ZSBzaG91bGQgY2FsY3VsYXRlIHRoZSByZWFkIHRpbWUgYmFzZWRcclxuICAgKiBvbiB0aGUgbnVtYmVyIG9mIHJpY2ggdGV4dCB3b3Jkcy5cclxuICAgKiBJZiBhIHJlYWQgdGltZSBvdmVycmlkZSBpcyBzZXQsIHN1Z2dlc3RfcmVhZF90aW1lX21zZWMgd2lsbCBiZSBhIHN0cmluZyBvZiB0aGUgcmVhZCB0aW1lXHJcbiAgICogaW4gbWlsbGlzZWNvbmRzLlxyXG4gICAqL1xyXG4gIGNvbnN0IGRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107XHJcbiAgY29uc3QgZGF0YUV2ZW50SW5kZXggPSBkYXRhTGF5ZXIuZmluZEluZGV4KChvYmopID0+XHJcbiAgICBPYmplY3QuaGFzT3duKG9iaiwgXCJzdWdnZXN0X3JlYWRfdGltZV9tc2VjXCIpLFxyXG4gICk7XHJcbiAgbGV0IHJlYWRUaW1lTXM7XHJcbiAgaWYgKGRhdGFFdmVudEluZGV4ICE9PSAtMSkge1xyXG4gICAgcmVhZFRpbWVNcyA9IGRhdGFMYXllcltkYXRhRXZlbnRJbmRleF0uc3VnZ2VzdF9yZWFkX3RpbWVfbXNlYztcclxuICB9XHJcblxyXG4gIC8qIElmIHJlYWRUaW1lRWwgaXMgcHJlc2VudCwgbm8gb3ZlcnJpZGUgd2FzIHNldC5cclxuICAgKiBDYWxjdWxhdGUgcmVhZCB0aW1lIGJhc2VkIG9uIDI3MCB3b3JkcyBwZXIgbWludXRlXHJcbiAgICovXHJcbiAgaWYgKHJlYWRUaW1lRWwpIHtcclxuICAgIGNvbnN0IHRleHRFbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLXJpY2gtdGV4dFwiKTtcclxuXHJcbiAgICBjb25zdCB3b3JkQ291bnQgPSBnZXRXb3JkQ291bnQodGV4dEVscyk7XHJcblxyXG4gICAgY29uc3QgcmVhZFRpbWVNaW4gPSB3b3JkQ291bnQgLyAyNzA7XHJcblxyXG4gICAgcmVhZFRpbWVFbC5pbm5lclRleHQgPVxyXG4gICAgICB3b3JkQ291bnQgPCAyNzBcclxuICAgICAgICA/IGRpY3Rpb25hcnk/LkxFU1NfVEhBTl9NSU5VVEVcclxuICAgICAgICA6IGAke01hdGguZmxvb3IocmVhZFRpbWVNaW4pfSAke2RpY3Rpb25hcnk/Lk1JTn1gO1xyXG5cclxuICAgIHJlYWRUaW1lTXMgPSBNYXRoLnJvdW5kKHJlYWRUaW1lTWluICogNjAwMDApO1xyXG5cclxuICAgIGlmIChkYXRhRXZlbnRJbmRleCAhPT0gLTEpIHtcclxuICAgICAgZGF0YUxheWVyW2RhdGFFdmVudEluZGV4XS5zdWdnZXN0X3JlYWRfdGltZV9tc2VjID0gcmVhZFRpbWVNcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChyZWFkVGltZU1zKSB7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgZGF0YUxheWVyLnB1c2goe1xyXG4gICAgICAgIGV2ZW50OiBcInBhZ2VSZWFkXCIsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdXNlciBoYXMgc2Nyb2xsZWQgNzUlIGRvd24gcGFnZVxyXG4gICAgICBjb25zdCBTQ1JPTExfUEVSQ0VOVCA9IDAuNzU7XHJcbiAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5zY3JvbGxZO1xyXG4gICAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICAgIGNvbnN0IGRvY3VtZW50SGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodDtcclxuICAgICAgY29uc3Qgc2hvdWxkUmVnaXN0ZXJQYWdlUmVhZCA9XHJcbiAgICAgICAgc2Nyb2xsVG9wICsgd2luZG93SGVpZ2h0ID49IFNDUk9MTF9QRVJDRU5UICogZG9jdW1lbnRIZWlnaHQ7XHJcbiAgICAgIGNvbnN0IGV2ZW50SWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnhkYnBlLXJlYWQtdGltZVwiKT8uZGF0YXNldC54ZGJwZTtcclxuXHJcbiAgICAgIGlmIChldmVudElkICYmIHNob3VsZFJlZ2lzdGVyUGFnZVJlYWQpIHtcclxuICAgICAgICByZWdpc3RlclhEQkV2ZW50KGV2ZW50SWQpO1xyXG4gICAgICB9XHJcbiAgICB9LCByZWFkVGltZU1zICogMC43NSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5pdFBhZ2VNZXRhZGF0YTtcclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0ssTUFBQyxtQkFBbUIsQ0FBQyxPQUFPO0FBQy9CLFFBQU0sYUFBYSxHQUFHLGFBQWEsaUJBQWlCLElBQ2hELEtBQUssTUFBTSxHQUFHLGFBQWEsaUJBQWlCLENBQUMsSUFDN0M7QUFFSixRQUFNLGFBQWEsR0FBRyxjQUFjLGVBQWU7QUFXbkQsUUFBTSxZQUFZLE9BQU8sYUFBYTtBQUN0QyxRQUFNLGlCQUFpQixVQUFVO0FBQUEsSUFBVSxDQUFDLFFBQzFDLE9BQU8sT0FBTyxLQUFLLHdCQUF3QjtBQUFBLEVBQy9DO0FBQ0UsTUFBSTtBQUNKLE1BQUksbUJBQW1CLElBQUk7QUFDekIsaUJBQWEsVUFBVSxjQUFjLEVBQUU7QUFBQSxFQUN4QztBQUtELE1BQUksWUFBWTtBQUNkLFVBQU0sVUFBVSxTQUFTLGlCQUFpQixlQUFlO0FBRXpELFVBQU0sWUFBWSxhQUFhLE9BQU87QUFFdEMsVUFBTSxjQUFjLFlBQVk7QUFFaEMsZUFBVyxZQUNULFlBQVksTUFDUix5Q0FBWSxtQkFDWixHQUFHLEtBQUssTUFBTSxXQUFXLENBQUMsSUFBSSx5Q0FBWSxHQUFHO0FBRW5ELGlCQUFhLEtBQUssTUFBTSxjQUFjLEdBQUs7QUFFM0MsUUFBSSxtQkFBbUIsSUFBSTtBQUN6QixnQkFBVSxjQUFjLEVBQUUseUJBQXlCO0FBQUEsSUFDcEQ7QUFBQSxFQUNGO0FBRUQsTUFBSSxZQUFZO0FBQ2QsZUFBVyxNQUFNOztBQUNmLGdCQUFVLEtBQUs7QUFBQSxRQUNiLE9BQU87QUFBQSxNQUNmLENBQU87QUFHRCxZQUFNLGlCQUFpQjtBQUN2QixZQUFNLFlBQVksT0FBTztBQUN6QixZQUFNLGVBQWUsT0FBTztBQUM1QixZQUFNLGlCQUFpQixTQUFTLGdCQUFnQjtBQUNoRCxZQUFNLHlCQUNKLFlBQVksZ0JBQWdCLGlCQUFpQjtBQUMvQyxZQUFNLFdBQVUsY0FBUyxjQUFjLGtCQUFrQixNQUF6QyxtQkFBNEMsUUFBUTtBQUVwRSxVQUFJLFdBQVcsd0JBQXdCO0FBQ3JDLHlCQUFpQixPQUFPO0FBQUEsTUFDekI7QUFBQSxJQUNQLEdBQU8sYUFBYSxJQUFJO0FBQUEsRUFDckI7QUFDSDsifQ==
